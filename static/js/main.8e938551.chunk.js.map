{"version":3,"sources":["serviceWorker.js","componants/Input.jsx","componants/field.jsx","App.js","Main.js","index.js","componants/check.png"],"names":["Boolean","window","location","hostname","match","Input","props","handleClick","e","key","value","target","trim","enter","type","placeHolder","className","onKeyDown","this","React","Component","Field","state","getImage","status","height","src","logo","alt","data","map","todo","style","textDecoration","id","onClick","change","text","index","FadeIn","styled","div","keyframes","fadeIn","App","addToList","setState","todos","changeStatus","ev","applyFilter","filter","getTodos","colors","placeholder","title","Main","custom","comp","addTodo","splice","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message","module","exports"],"mappings":"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","file":"static/js/main.8e938551.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\r\nimport \"./Input.css\";\r\n\r\nclass Input extends React.Component {\r\n  constructor(props) {\r\n    super();\r\n  }\r\n  handleClick = (e) => {\r\n    if (e.key === \"Enter\") {\r\n      const value = e.target.value;\r\n      if (value.trim()) {\r\n        this.props.enter(value);\r\n        e.target.value = \"\";\r\n      }\r\n    }\r\n  };\r\n  render() {\r\n    return (\r\n      <input\r\n        type=\"text\"\r\n        placeHolder=\"   Enter your todos here\"\r\n        className=\"input1\"\r\n        onKeyDown={this.handleClick}\r\n      />\r\n    );\r\n  }\r\n}\r\n\r\nexport default Input;\r\n","import React from \"react\";\r\nimport \"./field.css\";\r\nimport logo from \"./check.png\";\r\n\r\nexport default class Field extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      getImage: (status) => {\r\n        if (status === \"complete\") {\r\n          return (\r\n            <img className=\"tick\" height=\"15px\" src={logo} alt=\"check\"></img>\r\n          );\r\n        }\r\n      },\r\n    };\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"todos\">\r\n        {this.props.data.map((todo) => (\r\n          <li\r\n            style={{\r\n              textDecoration:\r\n                todo.status === \"complete\" ? \"line-through\" : \"none\",\r\n            }}\r\n            key={todo.id}\r\n            onClick={this.props.change(todo.id)}\r\n          >\r\n            {todo.text}\r\n            {this.state.getImage(todo.status)}\r\n          </li>\r\n        ))}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\nimport \"./App.css\";\nimport Input from \"./componants/Input.jsx\";\nimport Field from \"./componants/field.jsx\";\nimport { fadeIn } from \"react-animations\";\nimport styled, { keyframes } from \"styled-components\";\n\nlet index = 4;\nconst FadeIn = styled.div`\n  animation: 1.2s ${keyframes`${fadeIn}`};\n`;\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      todos: [\n        { text: \"wash\", id: 1, status: \"active\" },\n        { text: \"shop\", id: 2, status: \"complete\" },\n        { text: \"steal\", id: 3, status: \"active\" },\n      ],\n      filter: \"All\",\n      colors: [\"red\", \"blue\", \"green\"],\n    };\n  }\n\n  addToList = (value) => {\n    this.setState({\n      todos: [\n        { text: value, id: index++, status: \"active\" },\n        ...this.state.todos,\n      ],\n    });\n  };\n  changeStatus = (id) => (ev) => {\n    this.setState({\n      todos: this.state.todos.map((todo) =>\n        todo.id === id\n          ? {\n              ...todo,\n              status: todo.status === \"active\" ? \"complete\" : \"active\",\n            }\n          : todo\n      ),\n    });\n  };\n  applyFilter = (filter) => (ev) => {\n    this.setState({\n      filter: filter,\n    });\n  };\n  getTodos = () => {\n    switch (this.state.filter) {\n      case \"active\": {\n        return this.state.todos.filter((todo) => todo.status === \"active\");\n      }\n      case \"complete\": {\n        return this.state.todos.filter((todo) => todo.status === \"complete\");\n      }\n      default: {\n        return this.state.todos;\n      }\n    }\n  };\n\n  render() {\n    return (\n      <FadeIn>\n        <div className=\"App\">\n          <div className=\"todo\">\n            <div className=\"title\">\n              <input\n                type=\"text\"\n                className=\"titleInput\"\n                placeholder={\"Enter Title \" + this.props.title}\n              ></input>\n              <span className=\"focus-border\"></span>\n            </div>\n            <div className=\"buttons\">\n              <button onClick={this.applyFilter(\"all\")}>All</button>\n              <button onClick={this.applyFilter(\"active\")}>Todo/Active</button>\n              <button onClick={this.applyFilter(\"complete\")}>Completed</button>\n            </div>\n            <Input enter={this.addToList} />\n            <Field data={this.getTodos()} change={this.changeStatus} />\n          </div>\n        </div>\n      </FadeIn>\n    );\n  }\n}\n\nexport default App;\n","import React from \"react\";\r\nimport App from \"./App.js\";\r\nimport \"./Main.css\";\r\n\r\nlet index = 1;\r\nclass Main extends React.Component {\r\n  state = {\r\n    custom: [{ comp: App, index: 1 }],\r\n  };\r\n  addTodo = () => {\r\n    //this.state.custom.push({ comp: App, index: ++index });\r\n    this.state.custom.splice(0, 0, { comp: App, index: ++index });\r\n    this.setState({\r\n      custom: this.state.custom,\r\n    });\r\n  };\r\n  render() {\r\n    return (\r\n      <div>\r\n        <button className=\"Add\" onClick={this.addTodo}>\r\n          +\r\n        </button>\r\n        <div className=\"Components\">\r\n          {this.state.custom.map((Component) => {\r\n            return (\r\n              <Component.comp key={Component.index} title={Component.index} />\r\n            );\r\n          })}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Main;\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport Main from \"./Main.js\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Main />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/check.14662814.png\";"],"sourceRoot":""}